/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.ztechsystembuilder;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author samed
 */

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    public String[] CPU = new String[10];
    public String[] CPUCooling = new String[7];
    public String[] Motherboard = new String[7];
    public String[] RAM = new String[8];
    public String[] GPU = new String[7];
    public String[] Storage = new String[7];
    public String[] Case = new String[4];
    public String[] PSU = new String[6];
    
    
    public MainFrame() throws SQLException {
        initComponents();
        
        CPU_Table.setModel(SQL_Tables.CPU(null));
    }
    
    public void fillList()
    {
        for(int i = 1; i < 3; i++)
        {
            CPULabel.setText(CPULabel.getText() + CPU[i] + " ");
            CoolerLabel.setText(CoolerLabel.getText() + CPUCooling[i] + " ");
            MotherboardLabel.setText(MotherboardLabel.getText() + Motherboard[i] + " ");
            RAMLabel.setText(RAMLabel.getText() + RAM[i] + " ");
            GPULabel.setText(GPULabel.getText() + GPU[i] + " ");
            StorageLabel.setText(StorageLabel.getText() + Storage[i] + " ");
            CaseLabel.setText(CaseLabel.getText() + Case[i] + " ");
            PSULabel.setText(PSULabel.getText() + PSU[i] + " ");
        }
        
        RAMLabel.setText(RAMLabel.getText() + ", " + RAM[3] + ", " + RAM[4] + "GB, " + RAM[5] + "MHz, CL" + RAM[7]);
        GPULabel.setText(GPULabel.getText() + ", " + GPU[3] + "GB");
        StorageLabel.setText(StorageLabel.getText() + ", " + Storage[4] + "GB");
        PSULabel.setText(PSULabel.getText() + ", " + PSU[3] + "W");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPanels = new javax.swing.JTabbedPane();
        CPU_Panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CPU_Table = new javax.swing.JTable();
        CPUSocketFilter = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        chooseCPU = new javax.swing.JButton();
        CPUCooling_Panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CPUCooling_Table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        CoolerSocketFilter = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        CoolerTypeFilter = new javax.swing.JComboBox<>();
        chooseCooler = new javax.swing.JButton();
        Motherboard_Panel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Motherboard_Table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        ChipsetFilter = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        SocketFilter = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        MBSizeFilter = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        MBMemFilter = new javax.swing.JComboBox<>();
        chooseMotherboard = new javax.swing.JButton();
        RAM_Panel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Memory_Table = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        MemTypeFilter = new javax.swing.JComboBox<>();
        chooseMemory = new javax.swing.JButton();
        GPU_Panel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        GPUMemTypeFilter = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        GPU_Table = new javax.swing.JTable();
        chooseMemory1 = new javax.swing.JButton();
        chooseGPU = new javax.swing.JButton();
        Storage_Panel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Storage_Table = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        StorageFilter = new javax.swing.JComboBox<>();
        chooseStorage = new javax.swing.JButton();
        Case_Panel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        Case_Table = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        CaseFilter = new javax.swing.JComboBox<>();
        chooseCase = new javax.swing.JButton();
        PSU_Panel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        PSU_Table = new javax.swing.JTable();
        PSUTypeFilterLabel = new javax.swing.JLabel();
        PSUTypeFilter = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        PSUCertificateLabel = new javax.swing.JComboBox<>();
        choosePSU = new javax.swing.JButton();
        Result_Panel = new javax.swing.JPanel();
        CPULabel = new javax.swing.JLabel();
        CoolerLabel = new javax.swing.JLabel();
        MotherboardLabel = new javax.swing.JLabel();
        RAMLabel = new javax.swing.JLabel();
        GPULabel = new javax.swing.JLabel();
        StorageLabel = new javax.swing.JLabel();
        CaseLabel = new javax.swing.JLabel();
        PSULabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1440, 810));

        TabbedPanels.setEnabled(false);

        CPU_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(CPU_Table);

        CPUSocketFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "AM4", "TR4" }));
        CPUSocketFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPUSocketFilterActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("CPU Socket");

        chooseCPU.setText("CHOOSE & NEXT");
        chooseCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCPUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CPU_PanelLayout = new javax.swing.GroupLayout(CPU_Panel);
        CPU_Panel.setLayout(CPU_PanelLayout);
        CPU_PanelLayout.setHorizontalGroup(
            CPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPU_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CPUSocketFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(chooseCPU, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        CPU_PanelLayout.setVerticalGroup(
            CPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CPU_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPU_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CPUSocketFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseCPU)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("CPU", CPU_Panel);

        CPUCooling_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(CPUCooling_Table);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("CPU Socket");

        CoolerSocketFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "AM4", "TR4" }));
        CoolerSocketFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoolerSocketFilterActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Cooler Type");

        CoolerTypeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "Air", "Tower", "Liquid" }));
        CoolerTypeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoolerTypeFilterActionPerformed(evt);
            }
        });

        chooseCooler.setText("CHOOSE & NEXT");
        chooseCooler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCoolerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CPUCooling_PanelLayout = new javax.swing.GroupLayout(CPUCooling_Panel);
        CPUCooling_Panel.setLayout(CPUCooling_PanelLayout);
        CPUCooling_PanelLayout.setHorizontalGroup(
            CPUCooling_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPUCooling_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CPUCooling_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPUCooling_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CoolerSocketFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CPUCooling_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CoolerTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(chooseCooler, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        CPUCooling_PanelLayout.setVerticalGroup(
            CPUCooling_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPUCooling_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CPUCooling_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPUCooling_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CoolerSocketFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CoolerTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseCooler)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("CPU Cooling", CPUCooling_Panel);

        Motherboard_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(Motherboard_Table);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Chipset");

        ChipsetFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "A320", "B450", "B550", "TRX40", "X470", "X570" }));
        ChipsetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipsetFilterActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Socket");

        SocketFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "AM4", "TR4" }));
        SocketFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SocketFilterActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Size");

        MBSizeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "ATX", "Micro-ATX", "Mini-ITX" }));
        MBSizeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBSizeFilterActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Memory Type");

        MBMemFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "DDR4" }));
        MBMemFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBMemFilterActionPerformed(evt);
            }
        });

        chooseMotherboard.setText("CHOOSE & NEXT");
        chooseMotherboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMotherboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Motherboard_PanelLayout = new javax.swing.GroupLayout(Motherboard_Panel);
        Motherboard_Panel.setLayout(Motherboard_PanelLayout);
        Motherboard_PanelLayout.setHorizontalGroup(
            Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Motherboard_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ChipsetFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SocketFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MBSizeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(MBMemFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))))
                    .addComponent(chooseMotherboard, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        Motherboard_PanelLayout.setVerticalGroup(
            Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Motherboard_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Motherboard_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Motherboard_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChipsetFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SocketFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MBSizeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MBMemFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseMotherboard)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("Motherboard", Motherboard_Panel);

        Memory_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(Memory_Table);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Memory Type");

        MemTypeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "DDR4" }));
        MemTypeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MemTypeFilterActionPerformed(evt);
            }
        });

        chooseMemory.setText("CHOOSE & NEXT");
        chooseMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMemoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RAM_PanelLayout = new javax.swing.GroupLayout(RAM_Panel);
        RAM_Panel.setLayout(RAM_PanelLayout);
        RAM_PanelLayout.setHorizontalGroup(
            RAM_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RAM_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RAM_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MemTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(chooseMemory, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        RAM_PanelLayout.setVerticalGroup(
            RAM_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RAM_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RAM_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RAM_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MemTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseMemory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("RAM", RAM_Panel);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Memory Type");

        GPUMemTypeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "DDR4", "GDDR5", "GDDR5X", "GDDR6", "GDDR6X" }));
        GPUMemTypeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GPUMemTypeFilterActionPerformed(evt);
            }
        });

        GPU_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(GPU_Table);

        chooseMemory1.setText("CHOOSE & NEXT");

        chooseGPU.setText("CHOOSE & NEXT");
        chooseGPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseGPUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GPU_PanelLayout = new javax.swing.GroupLayout(GPU_Panel);
        GPU_Panel.setLayout(GPU_PanelLayout);
        GPU_PanelLayout.setHorizontalGroup(
            GPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GPU_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GPUMemTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(chooseGPU, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(GPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GPU_PanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(chooseMemory1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        GPU_PanelLayout.setVerticalGroup(
            GPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GPU_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GPU_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GPUMemTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseGPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(GPU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GPU_PanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(chooseMemory1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        TabbedPanels.addTab("GPU", GPU_Panel);

        Storage_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(Storage_Table);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Storage Type");

        StorageFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "SATA HDD", "SATA SSD", "M.2 SSD", "M.2 NVMe SSD" }));
        StorageFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StorageFilterActionPerformed(evt);
            }
        });

        chooseStorage.setText("CHOOSE & NEXT");
        chooseStorage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseStorageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Storage_PanelLayout = new javax.swing.GroupLayout(Storage_Panel);
        Storage_Panel.setLayout(Storage_PanelLayout);
        Storage_PanelLayout.setHorizontalGroup(
            Storage_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Storage_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Storage_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StorageFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(chooseStorage, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        Storage_PanelLayout.setVerticalGroup(
            Storage_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Storage_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Storage_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Storage_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StorageFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseStorage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("Storage", Storage_Panel);

        Case_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(Case_Table);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Motherboard Size");

        CaseFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "ATX", "Micro-ATX", "Mini-ITX" }));
        CaseFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CaseFilterActionPerformed(evt);
            }
        });

        chooseCase.setText("CHOOSE & NEXT");
        chooseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Case_PanelLayout = new javax.swing.GroupLayout(Case_Panel);
        Case_Panel.setLayout(Case_PanelLayout);
        Case_PanelLayout.setHorizontalGroup(
            Case_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Case_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Case_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CaseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(chooseCase, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        Case_PanelLayout.setVerticalGroup(
            Case_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Case_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Case_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Case_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CaseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseCase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("Case", Case_Panel);

        PSU_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(PSU_Table);

        PSUTypeFilterLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        PSUTypeFilterLabel.setText("PSU Type");

        PSUTypeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "Modular", "Semi-Modular", "Non-Modular" }));
        PSUTypeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSUTypeFilterActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("Certificate");

        PSUCertificateLabel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "80+", "80+ Bronze", "80+ Silver", "80+ Gold", "80+ Platinum" }));
        PSUCertificateLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSUCertificateLabelActionPerformed(evt);
            }
        });

        choosePSU.setText("CHOOSE & NEXT");
        choosePSU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePSUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PSU_PanelLayout = new javax.swing.GroupLayout(PSU_Panel);
        PSU_Panel.setLayout(PSU_PanelLayout);
        PSU_PanelLayout.setHorizontalGroup(
            PSU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PSU_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PSU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PSU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(PSUTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PSUTypeFilterLabel)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PSU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PSUCertificateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addComponent(choosePSU, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        PSU_PanelLayout.setVerticalGroup(
            PSU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PSU_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PSU_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PSU_PanelLayout.createSequentialGroup()
                        .addComponent(PSUTypeFilterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PSUTypeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PSUCertificateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(choosePSU)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE))
                .addContainerGap())
        );

        TabbedPanels.addTab("PSU", PSU_Panel);

        CPULabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        CPULabel.setText("CPU: ");

        CoolerLabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        CoolerLabel.setText("CPU Cooler: ");

        MotherboardLabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        MotherboardLabel.setText("Motherboard: ");

        RAMLabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        RAMLabel.setText("RAM: ");

        GPULabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        GPULabel.setText("Graphic Card: ");

        StorageLabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        StorageLabel.setText("Storage: ");

        CaseLabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        CaseLabel.setText("Case: ");

        PSULabel.setFont(new java.awt.Font("Tahoma", 1, 35)); // NOI18N
        PSULabel.setText("PSU: ");

        javax.swing.GroupLayout Result_PanelLayout = new javax.swing.GroupLayout(Result_Panel);
        Result_Panel.setLayout(Result_PanelLayout);
        Result_PanelLayout.setHorizontalGroup(
            Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Result_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CPULabel)
                    .addComponent(CoolerLabel)
                    .addComponent(MotherboardLabel)
                    .addComponent(RAMLabel)
                    .addComponent(GPULabel)
                    .addComponent(StorageLabel)
                    .addComponent(CaseLabel)
                    .addComponent(PSULabel))
                .addContainerGap(1154, Short.MAX_VALUE))
        );
        Result_PanelLayout.setVerticalGroup(
            Result_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Result_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CPULabel)
                .addGap(18, 18, 18)
                .addComponent(CoolerLabel)
                .addGap(18, 18, 18)
                .addComponent(MotherboardLabel)
                .addGap(18, 18, 18)
                .addComponent(RAMLabel)
                .addGap(18, 18, 18)
                .addComponent(GPULabel)
                .addGap(18, 18, 18)
                .addComponent(StorageLabel)
                .addGap(18, 18, 18)
                .addComponent(CaseLabel)
                .addGap(18, 18, 18)
                .addComponent(PSULabel)
                .addContainerGap(295, Short.MAX_VALUE))
        );

        TabbedPanels.addTab("Result", Result_Panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPanels)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPanels)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CPUSocketFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPUSocketFilterActionPerformed
        // TODO add your handling code here:
        int index = CPUSocketFilter.getSelectedIndex();
        String sql = "socket";
        
        if(index == 0) sql += "!=0";
        else sql += "=" + index;
        
        try {
            CPU_Table.setModel(SQL_Tables.CPU(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_CPUSocketFilterActionPerformed

    private void CoolerSocketFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoolerSocketFilterActionPerformed
        // TODO add your handling code here:
        CPUCoolingFilter();
                
    }//GEN-LAST:event_CoolerSocketFilterActionPerformed

    private void CPUCoolingFilter()
    {
        int socketIndex = CoolerSocketFilter.getSelectedIndex();
        int typeIndex = CoolerTypeFilter.getSelectedIndex();
        
        String socket = "socket", type = "type";
        
        if(socketIndex == 0) socket += "!=0";
        else socket += "=" + socketIndex;
        
        if(typeIndex == 0) type += "!=0";
        else type += "=" + typeIndex;
        
        String sql = socket + " AND " + type;
        
        try {
            CPUCooling_Table.setModel(SQL_Tables.CPUCooling(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void MotherboardFilter()
    {
        int chipsetIndex = ChipsetFilter.getSelectedIndex();
        int socketIndex = SocketFilter.getSelectedIndex();
        int sizeIndex = MBSizeFilter.getSelectedIndex();
        int memTypeIndex = MBMemFilter.getSelectedIndex();       
        
        String chipset = "chipset";
        String socket = "socket";
        String size = "size";
        String memType = "memory_type";
        
        if(chipsetIndex == 0) chipset += "!=0";
        else chipset += "=" + chipsetIndex;
        
        if(socketIndex == 0) socket += "!=0";
        else socket += "=" + socketIndex;
        
        if(sizeIndex == 0) size += "!=0";
        else size += "=" + sizeIndex;
        
        if(memTypeIndex == 0) memType += "!=0";
        else memType += "=" + memTypeIndex;
        
        String sql = chipset + " AND " + socket + " AND " + size + " AND " + memType;
        
        try {
            Motherboard_Table.setModel(SQL_Tables.Motherboard(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void MemoryFilter()
    {
        int typeIndex = MemTypeFilter.getSelectedIndex();
        
        String sql = "memory_type";
        
        if(typeIndex == 0) sql += "!=0";
        else sql += "=" + typeIndex;
        
        try {
            Memory_Table.setModel(SQL_Tables.Memory(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void GPUFilter()
    {
        int typeIndex = GPUMemTypeFilter.getSelectedIndex();
        
        String sql = "memory_type";
        
        if(typeIndex == 0) sql += "!=0";
        else sql += "=" + typeIndex;
        
        try {
            GPU_Table.setModel(SQL_Tables.GPU(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void StorageFilter()
    {
        int typeIndex = StorageFilter.getSelectedIndex();
        
        String sql = "storage_type";
        
        if(typeIndex == 0) sql += "!=0";
        else sql += "=" + typeIndex;
        
        try {
            Storage_Table.setModel(SQL_Tables.Storage(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void CaseFilter()
    {
        int sizeIndex = CaseFilter.getSelectedIndex();
        
        String sql = "motherboard_size";
        
        if(sizeIndex == 0) sql += "!=0";
        else sql += "=" + sizeIndex;
        
        try {
            Case_Table.setModel(SQL_Tables.Case(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void PSUFilter()
    {
        int typeIndex = PSUTypeFilter.getSelectedIndex();
        int certificateIndex = PSUCertificateLabel.getSelectedIndex();
        
        String type = "type";
        String certificate = "certificate";
        
        if(typeIndex == 0) type += "!=0";
        else type += "=" + typeIndex;
        
        if(certificateIndex == 0) certificate += "!=0";
        else certificate += "=" + certificateIndex;
        
        String sql = type + " AND " + certificate;
        
        try {
            PSU_Table.setModel(SQL_Tables.PSU(sql));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void CoolerTypeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoolerTypeFilterActionPerformed
        // TODO add your handling code here:
        CPUCoolingFilter();
    }//GEN-LAST:event_CoolerTypeFilterActionPerformed

    private void ChipsetFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipsetFilterActionPerformed
        // TODO add your handling code here:
        MotherboardFilter();
    }//GEN-LAST:event_ChipsetFilterActionPerformed

    private void SocketFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SocketFilterActionPerformed
        // TODO add your handling code here:
        MotherboardFilter();
    }//GEN-LAST:event_SocketFilterActionPerformed

    private void MBSizeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBSizeFilterActionPerformed
        // TODO add your handling code here:
        MotherboardFilter();
    }//GEN-LAST:event_MBSizeFilterActionPerformed

    private void MBMemFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBMemFilterActionPerformed
        // TODO add your handling code here:
        MotherboardFilter();
    }//GEN-LAST:event_MBMemFilterActionPerformed

    private void MemTypeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MemTypeFilterActionPerformed
        // TODO add your handling code here:
        //MemoryFilter();
    }//GEN-LAST:event_MemTypeFilterActionPerformed

    private void GPUMemTypeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GPUMemTypeFilterActionPerformed
        // TODO add your handling code here:
        GPUFilter();
    }//GEN-LAST:event_GPUMemTypeFilterActionPerformed

    private void StorageFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StorageFilterActionPerformed
        // TODO add your handling code here:
        StorageFilter();
    }//GEN-LAST:event_StorageFilterActionPerformed

    private void CaseFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaseFilterActionPerformed
        // TODO add your handling code here:
        CaseFilter();
    }//GEN-LAST:event_CaseFilterActionPerformed

    private void PSUTypeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSUTypeFilterActionPerformed
        // TODO add your handling code here:
        PSUFilter();
    }//GEN-LAST:event_PSUTypeFilterActionPerformed

    private void PSUCertificateLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSUCertificateLabelActionPerformed
        // TODO add your handling code here:
        PSUFilter();
    }//GEN-LAST:event_PSUCertificateLabelActionPerformed

    private void chooseCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCPUActionPerformed
        int index = CPU_Table.getSelectedRow();
        
        for (int i = 0; i < 10; i++) {
            CPU[i] = CPU_Table.getValueAt(index, i).toString();
        }
        
        try {
            CPUCooling_Table.setModel(SQL_Tables.CPUCooling(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(1);
    }//GEN-LAST:event_chooseCPUActionPerformed

    private void chooseCoolerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCoolerActionPerformed
        int index = CPUCooling_Table.getSelectedRow();
        
        for(int i = 0; i < 7; i++)
        {
            CPUCooling[i] = CPUCooling_Table.getValueAt(index, i).toString();
        }
        
        try {
            Motherboard_Table.setModel(SQL_Tables.Motherboard(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(2);
    }//GEN-LAST:event_chooseCoolerActionPerformed

    private void chooseMotherboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMotherboardActionPerformed
        int index = Motherboard_Table.getSelectedRow();
        
        for(int i = 0; i < 7; i++)
        {
            Motherboard[i] = Motherboard_Table.getValueAt(index, i).toString();
        }
        
        try {
            Memory_Table.setModel(SQL_Tables.Memory(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(3);
    }//GEN-LAST:event_chooseMotherboardActionPerformed

    private void chooseMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMemoryActionPerformed
        int index = Memory_Table.getSelectedRow();
        
        for(int i = 0; i < 8; i++)
        {
            RAM[i] = Memory_Table.getValueAt(index, i).toString();
        }
        
        try {
            GPU_Table.setModel(SQL_Tables.GPU(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(4);
    }//GEN-LAST:event_chooseMemoryActionPerformed

    private void chooseGPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseGPUActionPerformed
        int index = GPU_Table.getSelectedRow();
        
        for(int i = 0; i < 7; i++)
        {
            GPU[i] = GPU_Table.getValueAt(index, i).toString();
        }
        
        try {
            Storage_Table.setModel(SQL_Tables.Storage(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(5);
    }//GEN-LAST:event_chooseGPUActionPerformed

    private void chooseStorageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseStorageActionPerformed
        int index = Storage_Table.getSelectedRow();
        
        for(int i = 0; i < 7; i++)
        {
            Storage[i] = Storage_Table.getValueAt(index, i).toString();
        }
        
        try {
            Case_Table.setModel(SQL_Tables.Case(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(6);
    }//GEN-LAST:event_chooseStorageActionPerformed

    private void chooseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCaseActionPerformed
        int index = Case_Table.getSelectedRow();
        
        for(int i = 0; i < 4; i++)
        {
            Case[i] = Case_Table.getValueAt(index, i).toString();
        }
        
        try {
            PSU_Table.setModel(SQL_Tables.PSU(null));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TabbedPanels.setSelectedIndex(7);
    }//GEN-LAST:event_chooseCaseActionPerformed

    private void choosePSUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePSUActionPerformed
        int index = PSU_Table.getSelectedRow();
        
        for(int i = 0; i < 6; i++)
        {
            PSU[i] = PSU_Table.getValueAt(index, i).toString();
        }
        fillList();
        TabbedPanels.setSelectedIndex(8);
    }//GEN-LAST:event_choosePSUActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CPUCooling_Panel;
    private javax.swing.JTable CPUCooling_Table;
    private javax.swing.JLabel CPULabel;
    private javax.swing.JComboBox<String> CPUSocketFilter;
    private javax.swing.JPanel CPU_Panel;
    private javax.swing.JTable CPU_Table;
    private javax.swing.JComboBox<String> CaseFilter;
    private javax.swing.JLabel CaseLabel;
    private javax.swing.JPanel Case_Panel;
    private javax.swing.JTable Case_Table;
    private javax.swing.JComboBox<String> ChipsetFilter;
    private javax.swing.JLabel CoolerLabel;
    private javax.swing.JComboBox<String> CoolerSocketFilter;
    private javax.swing.JComboBox<String> CoolerTypeFilter;
    private javax.swing.JLabel GPULabel;
    private javax.swing.JComboBox<String> GPUMemTypeFilter;
    private javax.swing.JPanel GPU_Panel;
    private javax.swing.JTable GPU_Table;
    private javax.swing.JComboBox<String> MBMemFilter;
    private javax.swing.JComboBox<String> MBSizeFilter;
    private javax.swing.JComboBox<String> MemTypeFilter;
    private javax.swing.JTable Memory_Table;
    private javax.swing.JLabel MotherboardLabel;
    private javax.swing.JPanel Motherboard_Panel;
    private javax.swing.JTable Motherboard_Table;
    private javax.swing.JComboBox<String> PSUCertificateLabel;
    private javax.swing.JLabel PSULabel;
    private javax.swing.JComboBox<String> PSUTypeFilter;
    private javax.swing.JLabel PSUTypeFilterLabel;
    private javax.swing.JPanel PSU_Panel;
    private javax.swing.JTable PSU_Table;
    private javax.swing.JLabel RAMLabel;
    private javax.swing.JPanel RAM_Panel;
    private javax.swing.JPanel Result_Panel;
    private javax.swing.JComboBox<String> SocketFilter;
    private javax.swing.JComboBox<String> StorageFilter;
    private javax.swing.JLabel StorageLabel;
    private javax.swing.JPanel Storage_Panel;
    private javax.swing.JTable Storage_Table;
    private javax.swing.JTabbedPane TabbedPanels;
    private javax.swing.JButton chooseCPU;
    private javax.swing.JButton chooseCase;
    private javax.swing.JButton chooseCooler;
    private javax.swing.JButton chooseGPU;
    private javax.swing.JButton chooseMemory;
    private javax.swing.JButton chooseMemory1;
    private javax.swing.JButton chooseMotherboard;
    private javax.swing.JButton choosePSU;
    private javax.swing.JButton chooseStorage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    // End of variables declaration//GEN-END:variables
}
